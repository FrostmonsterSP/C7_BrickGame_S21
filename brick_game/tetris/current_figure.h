/**
 * @file current_figure.h
 * @brief Файл с описанием функций и типов, связанных с текущей фигурой
 *
 * Данный файл содержит объявления типов и функций, которые
 * непосредственно связаны с текущей фигурой, такими как
 * текущие координаты, тип, вращение, информация о краях
 * (левый, правый, нижний и т.д.), а также функции
 * для установки этих свойств, перемещения, поворота,
 * проверки на столкновение с полем и блоками, помещения
 * на поле и очистки.
 */
#ifndef CURRENT_FIGURE_H
#define CURRENT_FIGURE_H

#define DIR_LEFT 0   ///< Поворот текущей фигуры влево
#define DIR_RIGHT 1  ///< Поворот текущей фигуры вправо

/**
 * @brief Поворот текущей фигуры
 *
 * @details Функция поворачивает текущую фигуру против часовой стрелки. Перед
 * вращением функция проверяет, не перекрывает ли повернутая фигура блок на
 * игровом поле. Если повернутая фигура не перекрывается, функция обновляет
 * вращение текущей фигуры, устанавливает ее левый и правый край и проверяет
 * ряды под текущей фигурой на наличие блоков. Функция также проверяет, не
 * выходит ли повернутая фигура за пределы игрового поля, и, если необходимо,
 * обновляет координату x текущей фигуры.
 */
void rotateCurrFig(void);

/**
 * @brief Установите новую текущую цифру.
 *
 * @details Функция устанавливает новую текущую фигуру. Она копирует тип и
 * вращение из следующей фигуры, генерирует новую следующую фигуру и
 * устанавливает координаты текущей фигуры в середину поля.
 */
void setNewCurrFig(void);

/**
 * @brief Перемещение текущей фигуры влево или вправо.
 *
 * @details Функция перемещает текущую фигуру на одну ячейку влево или вправо в
 * зависимости от введенного направления. Перед перемещением фигуры функция
 * проверяет, не перекрывается ли фигура с блоками на поле или не пересекает ли
 * границу поля. Если перекрытие обнаружено, функция не перемещает фигуру.
 *
 * @param[in] direction Направление перемещения (0 - влево, 1 - вправо)
 */
void moveCurrFig(int);

/**
 * @brief Переместить текущую фигуру вниз.
 *
 * @details Эта функция перемещает текущую фигуру на одну ячейку вниз. Она не
 * проверяет наличие столкновений с полем или другими блоками, поэтому проверки
 * должны выполняться до вызова функции отдельно в зависимости от условий.
 */
void moveCurrFigDown(void);

/**
 * @brief Проверяет, можно ли переместить текущую фигуру вниз.
 *
 * Проверяет, не приведет ли перемещение текущей фигуры вниз на одну клетку к
 * столкновению с нижней частью поля или блоком в поле.
 *
 * @retval 0 - приведет к выходу за пределы нижней части поля или  к
 * столкновению с блоком в поле.
 * @retval 1 - можно переместить текущую фигуру вниз.
 */
int checkNextLine(void);

/**
 * @brief Помещает текущую фигуру на игровое поле, если она полностью находится
 * внутри него.
 *
 * Функция проходит по каждой ячейке текущей фигуры и, если ячейка равна 1 и
 * соответствующая ячейка на игровом поле находится внутри поля, устанавливает
 * ячейку на игровом поле в 1.
 */
void putCurrFig(void);

/**
 * @brief Очистка текущей цифры из поля.
 *
 * Эта функция используется перед отрисовкой текущей фигуры в новой позиции. Она
 * устанавливает в 0 все ячейки на поле, где была размещена текущая фигура.
 */
void clearCurrFig(void);

/**
 * @brief Определение левого края текущей фигуры
 *
 * @details Функция находит левый край текущей фигуры, т.е. количество пустых
 * столбцов от левого края фигуры до первой ячейки фигуры.
 */
void setLeftEdge(void);

/**
 * @brief Определение правого края текущей фигуры
 *
 * @details Функция находит правый край текущей фигуры, т.е. количество пустых
 * столбцов от правого края фигуры до первой ячейки фигуры.
 */
void setRightEdge(void);

/**
 * @brief Определение нижних границ столбцов текущей фигуры
 *
 * @details Функция проходит по каждому столбцу текущей фигуры, начиная с
 * нижнего, и находит первую ячейку, которая является частью фигуры. Это
 * значение записывается в rows_next_line[i].
 */
void rowsToCheck(void);

/**
 * @brief Получает индекс по y нижней ячейки в столбце i строк для проверки
 * текущей фигуры.
 *
 * @param i Индекс столбца, для которого нужно получить индекс по y нижней
 * ячейки для проверки.
 * @return Индекс по y нижней ячейки в столбце i строк для проверки текущей
 * фигуры.
 */
int getCurrFigRowsToCheck(int i);

/**
 * @defgroup CurrentFigurePropertiesGetters Геттеры свойств текущей фигуры
 * @{
 * Функции для получения свойств текущей фигуры.
 *
 * Эти функции предоставляют доступ к координатам, типу, вращению и информации о
 * краях текущей фигуры.
 */

/**
 * @brief Получить координату x текущей фигуры.
 *
 * @return Координата x текущей фигуры.
 */
int getCurrFigCoordX(void);

/**
 * @brief Получение координаты y текущей фигуры.
 *
 * @return Координата y текущей фигуры.
 */
int getCurrFigCoordY(void);

/**
 * @brief Получение типа текущей фигуры.
 *
 * @return Тип текущей фигуры.
 */
int getCurrFigType(void);

/**
 * @brief Получение вращения текущей фигуры.
 *
 * @return Вращение текущей фигуры.
 */
int getCurrFigRotation(void);

/**
 * @brief Получение левого края текущей фигуры.
 *
 * @return Левый край текущей фигуры.
 */
int getCurrFigLeftEdge(void);

/**
 * @brief Получение правого края текущей фигуры.
 *
 * @return Правый край текущей фигуры.
 */
int getCurrFigRightEdge(void);

/**
 * @}
 */

/**
 * @defgroup CurrentFigurePropertiesSetters Сеттеры свойств текущей фигуры
 * @{
 * Функции для установки свойств текущей фигуры.
 *
 * Эти функции предоставляют доступ к установке координат, типа, вращения и
 * информации о краях текущей фигуры.
 */

/**
 * @brief Установить тип текущей фигуры.
 *
 * @param type Новый тип текущей фигуры.
 */
void setCurrFigType(int type);

/**
 * @brief Установить координату x текущей фигуры.
 *
 * @param x Новая координата x текущей фигуры.
 */
void setCurrFigCoordX(int x);

/**
 * @brief Установить координату y текущей фигуры.
 *
 * @param y Новая координата y текущей фигуры.
 */
void setCurrFigCoordY(int y);

/**
 * @brief Установить вращение текущей фигуры.
 *
 * @param rotation Новое вращение текущей фигуры.
 */
void setCurrFigRotation(int rotation);

/** @} */

#endif
