/**
 * @file private.h
 * @brief Файл с описанием функций и типов, внутренних для игрового движка
 *
 * Данный файл содержит объявления типов и функций, которые используются только
 * внутренними компонентами игрового движка. Он содержит объявления функций
 * инициализации, старта, перемещения, поворота, сброса, касания, заполнения
 * строки, очистки заполненных строк, изменения направления, изменения скорости,
 * выхода, а также вспомогательные функции, которые используются этими
 * функциями.
 */
#ifndef ENGINE_PRIVATE_H
#define ENGINE_PRIVATE_H

#define MAX_FILEPATH 256

/**
 * @brief Обработчик событий игры.
 *
 * Функция выбирает соответствующий переход по таблице состояний
 * StateTable и выполняет соответствующую функцию действия.
 *
 * @param event Событие игры (тип GameEvent_t, 0-12).
 */
void handleEvent(int event);

/**
 * @brief Устанавливает лучший результат игры (high score)
 *
 * Функция считывает сохранённый лучший результат из файла "score.bin" и
 * обновляет соответствующее поле структуры `GameInfo`. Если файл не найден
 * или в нём записано некорректное значение, лучший результат
 * устанавливается в 0.
 */
void setHighScore(void);

/**
 * @brief Сохраняет лучший результат игры (high score)
 *
 * Функция записывает текущий лучший результат в файл "score.bin", если
 * текущий счёт игрока превышает сохранённый лучший результат.
 */
void saveHighScore(void);

/**
 * @brief Инициализация игрового поля
 *
 * Функция заполняет игровое поле в зависимости от уровня игры. Чем выше
 * уровень, тем больше заполненных клеток появляется в нижней части поля.
 * Начальные заполненные клетки генерируются случайным образом.
 */
void initField(void);

/**
 * @brief Очищает строку на игровом поле
 *
 * Функция удаляет все блоки из указанной строки на игровом поле.
 *
 * @param y Номер строки, которую нужно очистить.
 */
void clearLine(int y);

/**
 * @brief Сдвиг игрового поля вниз
 *
 * Функция сдвигает все строки поля выше указанной вниз на одну строку,
 * начиная с заданной строки и до минимальной строки `min_y`. Верхняя строка
 * при этом очищается.
 *
 * @param y Номер строки, с которой начинается сдвиг.
 * @param min_y Минимальный индекс строки, до которой происходит сдвиг.
 */
void moveField(int y, int min_y);

/**
 * @brief Проверка и очистка заполненных линий
 *
 * Функция проверяет, есть ли на поле заполненные линии, и если такие линии
 * найдены, очищает их и сдвигает верхние строки вниз. За каждую очищенную линию
 * начисляются очки. Если игрок преодолел порог очков, увеличивается уровень
 * и скорость игры.
 */
void checkLines(void);

/**
 * @brief Устанавливает уровень игры
 *
 * @param score Уровень игры.
 */
void setGameLevel(int score);

/**
 * @brief Устанавливает скорость игры
 *
 * @param speed Скорость игры.
 */
void setGameSpeed(int speed);

/**
 * @brief Устанавливает текущее состояние игры
 *
 * @param state Состояние игры (например, пауза, игра и т.д.).
 */
void setGameState(int state);

/**
 * @brief Устанавливает текущий счёт игрока
 *
 * @param score Счёт игрока.
 */
void setGameScore(int score);

/**
 * @brief Устанавливает лучший результат (high score)
 *
 * @param score Новый лучший результат.
 */
void setGameHighScore(int score);

/**
 * @brief Сбрасывает таймер до начального значения
 *
 * Функция сбрасывает таймер на значение, зависящее от скорости игры.
 */
void resetTimer(void);

/**
 * @brief Увеличивает уровень игры
 *
 * Функция увеличивает текущий уровень игры, если он ещё не достиг
 * максимального.
 */
void incGameLevel(void);

/**
 * @brief Увеличивает скорость игры
 *
 * Функция увеличивает скорость игры, если она ещё не достигла максимальной.
 */
void incGameSpeed(void);

/**
 * @brief Уменьшает уровень игры
 *
 * Функция уменьшает текущий уровень игры, если он больше минимального.
 */
void decGameLevel(void);

/**
 * @brief Уменьшает скорость игры
 *
 * Функция уменьшает скорость игры, если она больше минимальной.
 */
void decGameSpeed(void);

/**
 * @brief Получает текущее состояние игры
 *
 * @return Текущее состояние игры.
 */
int getGameState(void);

/**
 * @brief Получает текущий уровень игры
 *
 * @return Текущий уровень игры.
 */
int getGameLevel(void);

/**
 * @brief Получает текущую скорость игры
 *
 * @return Текущая скорость игры.
 */
int getGameSpeed(void);

/**
 * @brief Получает текущий счёт игрока
 *
 * @return Текущий счёт игрока.
 */
int getGameScore(void);

/**
 * @brief Получает лучший результат (high score)
 *
 * @return Лучший результат (high score).
 */
int getGameHighScore(void);

/**
 * @brief Получает значение ячейки текущей фигуры
 *
 * @param y Координата y ячейки фигуры.
 * @param x Координата x ячейки фигуры.
 * @return Значение ячейки (0 - пустая, 1 - заполненная).
 */
int getCurrFigCell(int y, int x);

/**
 * @brief Устанавливает следующую фигуру для отображения
 *
 * Функция сохраняет информацию о следующей фигуре в поле `GameInfo.next`
 * для отображения её на экране.
 */
void setGameInfoNext(void);

/**
 * @brief Устанавливает значение ячейки игрового поля
 *
 * @param y Координата y на игровом поле.
 * @param x Координата x на игровом поле.
 * @param val Новое значение ячейки (0 - пустая, 1 - заполненная).
 */
void setFieldCell(int y, int x, int val);

/**
 * @brief Получает значение ячейки игрового поля
 *
 * @param y Координата y на игровом поле.
 * @param x Координата x на игровом поле.
 * @return Значение ячейки (0 - пустая, 1 - заполненная).
 */
int getFieldCell(int y, int x);

/**
 * @brief Возвращает поворот следующей фигуры
 * @return поворот следующей фигуры (int 0-3)
 */
int getNextFigRotation(void);

/**
 * @brief Возвращает тип следующей фигуры
 * @return тип следующей фигуры (int 0-6)
 */
int getNextFigType(void);

/**
 * @brief Инициализирует следующую фигуру
 *
 * @details Функция генерирует случайный тип и поворот для следующей фигуры, а
 * затем вызывает setGameInfoNext() для установки указателя GameInfo.next на
 * двухмерный массив фигуры **Figures[][]
 */
void newNextFigure(void);

char *getScoreFilePath(void);

#endif  // ENGINE_PRIVATE_H
