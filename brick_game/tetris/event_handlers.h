/**
 * @file event_handlers.h
 * @brief Файл с описанием функций обработчиков событий
 *
 * Данный файл содержит объявления функций, которые
 * непосредственно связаны с обработкой событий, такими как
 * инициализация, старт, перемещение, поворот, сброс, касание,
 * заполнение строки, очистка заполненных строк, изменение
 * направления, изменение скорости, пауза, выход, а также
 * вспомогательные функции, которые используются этими
 * функциями обработчиками.
 */
#ifndef EVENT_HANDLERS_H
#define EVENT_HANDLERS_H

#include <engine.h>

#ifndef NULL
#define NULL ((void*)0)
#endif

/**
 * @brief Структура, описывающая переход состояний конечного автомата.
 *
 * @param currentState Текущее состояние автомата.
 * @param event Событие, которое вызывает переход.
 * @param nextState Следующее состояние автомата после события.
 * @param action Функция, которая выполняется при переходе.
 */
typedef struct {
  GameState_t currentState;  ///< Текущее состояние автомата.
  GameEvent_t event;  ///< Событие, которое вызывает переход.
  GameState_t nextState;  ///< Следующее состояние автомата после события.
  void (*action)(void);  ///< Функция, которая выполняется при переходе.
} StateTransition_t;

/**
 * @brief Обработчик события инициализации (EventInit)
 *
 * Функция выполняет действия при инициализации игры.
 * Она устанавливает лучший результат (high score) из файла "score.bin", если
 * он существует, иначе - 0. Также, она устанавливает игровой уровень (level)
 * и скорость (speed) игры в 1.
 */
void handleEventInit(void);

/**
 * @brief Обработчик события старта новой игры (EventStart)
 *
 * Эта функция вызывается при получении события EventStart из очереди событий.
 * Она выполняет действия при старте игры. Она генерирует новую фигуру,
 * добавляет текущую фигуру в поле, очищает поле и сбрасывает таймер.
 */
void handleEventStart(void);

/**
 * @brief Обработчик события перемещения влево по нажатию клавиши (EventLeft)
 *
 * Эта функция вызывается при получении события EventLeft из очереди событий.
 * Она выполняет действия при сдвиге фигуры влево. Она очищает текущую фигуру,
 * сдвигает ее влево, и размещает ее в поле.
 */
void handleEventMoveLeft(void);

/**
 * @brief Обработчик события перемещения вправо по нажатию клавиши (EventRight)
 *
 * Эта функция вызывается при получении события EventRight из очереди событий.
 * Она выполняет действия при сдвиге фигуры вправо. Она очищает текущую фигуру,
 * сдвигает ее вправо, и размещает ее в поле.
 */
void handleEventMoveRight(void);

/**
 * @brief Обработка события перемещения вниз если такое возможно
 * (EventPlaceFree).
 *
 * Эта функция вызывается при получении события EventPlaceFree из очереди
 * событий. Она перемещает текущую фигуру на одну клетку вниз и сбрасывает
 * таймер.
 */
void handleEventPlaceFree(void);

/**
 * @brief Обработка события поворота текущей фигуры (EventRotate).
 *
 * Эта функция вызывается при получении события EventRotate из очереди событий.
 * Она поворачивает текущую фигуру против часовой стрелки путём увеличения
 * поворота Rotation_t текущей фигуры на единицу и помещает ее обратно на поле.
 */
void handleEventRotate(void);

/**
 * @brief Обработка события сброса фигуры вниз (EventDrop).
 *
 * Эта функция вызывается при получении события EventDrop. Она удаляет текущую
 * фигуру с поля и непрерывно перемещает фигуру вниз по полю увеличивая её
 * координату y, пока она не встретит блок или нижнюю границу поля. Затем она
 * помещает фигуру обратно на поле.
 */
void handleEventDrop(void);

/**
 * @brief Обработка события касания фигуры с полем (EventTouchdown).
 *
 * Эта функция вызывается при получении события EventTouchdown.
 * Она удаляет текущую фигуру с поля и запускает проверку на заполненные строки.
 * Если строка была заполнена, то она удаляется, а блоки, расположенные выше
 * нее, сдвигаются вниз. Затем она выставляет новые координаты для новой фигуры,
 * помещает ее на поле и сбрасывает таймер.
 */
void handleEventTouchdown(void);

/**
 * @brief Возвращает размер таблицы переходов состояний.
 *
 * @return Количество элементов в массиве StateTransition_t.
 */
int getTransitionTableSize(void);

#endif
