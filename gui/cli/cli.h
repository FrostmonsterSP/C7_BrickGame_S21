/**
 * @file cli.h
 * @brief Заголовочный файл для консольного интерфейса игры "Тетрис".
 *
 * Этот файл содержит определения, необходимые для работы с консольным
 * интерфейсом игры. Описываются основные структуры данных, такие как информация
 * о состоянии игры (GameInfo_t), параметры окон (WINDOW) и элементы меню
 * (MenuItem_t). Также здесь объявлены прототипы функций для отрисовки элементов
 * интерфейса, включая игровое поле, панель управления, окно информации, меню и
 * следующую фигуру.
 *
 * Интерфейс построен с использованием библиотеки ncurses для создания
 * графического интерфейса в консоли, позволяя динамически отображать состояние
 * игры и взаимодействовать с пользователем.
 */
#ifndef CLI_H
#define CLI_H

#include <engine.h>
#include <ncurses.h>

#define ENTR_KEY 10  ///< Enter в ASCII

#define GW_HEIGHT (FIELD_HEIGHT + 2)  ///< Высота игрового окна
#define GW_WIDTH ((FIELD_WIDTH * 2) + 2)  ///< Ширина игрового окна
#define GW_POS_X 0  ///< Левая граница игрового окна
#define GW_POS_Y 0  ///< Верхняя граница игрового окна

#define INFO_HEIGHT GW_HEIGHT  ///< Высота информационной панели
#define INFO_WIDTH GW_WIDTH  ///< Ширина информационной панели
#define INFO_POS_X (GW_WIDTH + 1)  ///< Левая граница информационной панели
#define INFO_POS_Y GW_POS_Y  ///< Верхняя граница информационной панели

#define EXTRA_HEIGHT 7  ///< Высота дополнительной панели
#define EXTRA_WIDTH \
  (GW_WIDTH + INFO_WIDTH + 1)  ///< Ширина дополнительной панели
#define EXTRA_POS_Y GW_HEIGHT  ///< Верхняя граница дополнительной панели
#define EXTRA_POS_X GW_POS_X  ///< Левая граница дополнительной панели

#define MENU_HEIGHT 10  ///< Высота окна меню
#define MENU_WIDTH 16   ///< Ширина окна меню
#define MENU_POS_Y \
  ((GW_HEIGHT - MENU_HEIGHT) / 2)  ///< Верхняя граница окна меню
#define MENU_POS_X ((GW_WIDTH - MENU_WIDTH) / 2)  ///< Левая граница окна меню

#define NP_HEIGHT (FIGURE_HEIGHT + 2)  ///< Высота окна следующей фигуры
#define NP_WIDTH (FIGURE_WIDTH * 2 + 2)  ///< Ширина окна следующей фигуры
#define NP_POS_X \
  ((INFO_WIDTH - NP_WIDTH) / 2)  ///< Левая граница окна следующей фигуры
#define NP_POS_Y 2  ///< Верхняя граница окна следующей фигуры

#define INIT_MENU_ITEM_X 5  ///< Левая граница пункта начального меню
#define INIT_MENU_ITEM_Y 3  ///< Положение первого пункта начального меню
#define INIT_MENU_ITEM_L 6  ///< Ширина пункта начального меню
#define IDLE_MENU_ITEM_X 3  ///< Левая граница пункта меню паузы
#define IDLE_MENU_HEAD_Y 6  ///< Положение заголовка меню паузы
#define MENU_FOOTER_Y 8  ///< Положение нижнего пункта меню

/**
 * @enum MenuItem_t
 * @brief Перечисление пунктов меню
 *
 * Это перечисление содержит возможные пункты меню.
 */
typedef enum {
  Play,          ///< Играть
  LevelRestart,  ///< Уровень/Перезапуск
  Speed,         ///< Скорость
  Exit,          ///< Выход
  IncLevel,      ///< Увеличить уровень
  DecLevel,      ///< Уменьшить уровень
  IncSpeed,      ///< Увеличить скорость
  DecSpeed,      ///< Уменьшить скорость
} MenuItem_t;

/**
 * @brief Отрисовка панели управления.
 *
 * Отображает управление игрой, включая клавиши для перемещения, начала игры,
 * паузы и выхода.
 */
void drawControlPanel(void);

/**
 * @brief Отрисовка меню игры.
 *
 * В зависимости от состояния игры отрисовывает соответствующее меню.
 * @param state Текущее состояние игры.
 * @param current_item Текущий пункт меню.
 */
void drawMenus(GameState_t, MenuItem_t);

/**
 * @brief Отрисовка меню в состоянии инициализации.
 *
 * Отображает пункты меню для выбора уровня, скорости и начала игры.
 * @param current_item Текущий пункт меню.
 */
void drawMenuBodyInit(MenuItem_t);

/**
 * @brief Отрисовка меню в состоянии паузы.
 *
 * Отображает пункты меню для продолжения игры или её перезапуска.
 * @param current_item Текущий пункт меню.
 */
void drawMenuBodyIdle(MenuItem_t);

/**
 * @brief Отрисовка нижней части меню.
 *
 * Отображает кнопку "Exit" для выхода из игры.
 * @param current_item Текущий пункт меню.
 */
void drawMenuFooter(MenuItem_t);

/**
 * @brief Отрисовка символов '+' и '-' для изменения настроек в меню.
 *
 * В зависимости от выбранного пункта меню отображает символы '+' и '-' для
 * изменения уровня или скорости.
 * @param draw_condition Условие для отрисовки символов.
 * @param current_item Текущий пункт меню.
 * @param line_y Позиция по оси Y для отрисовки символов.
 */
void drawPlusMinus(int, MenuItem_t, int);

/**
 * @brief Отрисовка информационной панели.
 *
 * Отображает текущую статистику игры, включая уровень, скорость и счёт.
 * @param state Структура с информацией о текущем состоянии игры.
 */
void drawInfoPanel(const GameInfo_t *);

/**
 * @brief Отрисовка игрового поля.
 *
 * Отображает текущее состояние игрового поля на экране.
 * @param game_info Структура с информацией о текущем состоянии игры.
 */
void drawGameField(const GameInfo_t *);

/**
 * @brief Отрисовка следующей фигуры.
 *
 * Отображает следующую фигуру в отведённом для неё окне.
 * @param game_info Структура с информацией о текущем состоянии игры.
 */
void drawNextPiece(const GameInfo_t *);

/**
 * @brief Отрисовка отдельной ячейки игрового поля.
 *
 * Отображает одну ячейку игрового поля в указанной позиции.
 * @param x Позиция по оси X.
 * @param y Позиция по оси Y.
 * @param window Окно для отрисовки.
 * @param cell Значение ячейки (занята или пуста).
 */
void drawCell(int, int, WINDOW *, int);

/**
 * @brief Инициализация окна меню.
 *
 * Создаёт и отображает окно меню.
 * @return 1, если окно меню уже существует, 0 в противном случае.
 */
int initMenuWin(void);

/**
 * @brief Закрытие окна меню.
 *
 * Уничтожает окно меню.
 */
void closeMenuWin(void);

/**
 * @brief Обработка нажатия клавиш в меню
 *
 * В зависимости от текущего состояния и действия пользователя, обрабатывает
 * выбор меню.
 *
 * @param is_idle Флаг состояния игры: пауза или ожидание.
 * @param action Действие пользователя.
 * @param current_item Текущий пункт меню.
 *
 * @retval 1 - действие подтверждено
 * @retval 0 - действие не подтверждено
 */
int menuKeyHandler(int, UserAction_t, MenuItem_t *);

/**
 * @brief Получение действия пользователя с клавиатуры.
 *
 * Определяет действие пользователя на основе нажатой клавиши.
 *
 * @return Соответствующее действие пользователя.
 */
UserAction_t getKey(void);

/**
 * @brief Обработка пользовательского ввода в меню.
 *
 * В зависимости от выбранного пункта меню возвращает соответствующее действие.
 * @param current_item Текущий пункт меню.
 * @return Действие пользователя (направление или действие).
 */
UserAction_t menuUserInputMod(MenuItem_t);

/**
 * @defgroup WindowGetters Функции для получения указателей на окна
 * @{
 * @brief Функции для получения указателей на окна
 *
 * Эти функции предоставляют доступ к окнам, в которых отображаются
 * информационные панели, игровое поле, следующая фигура и меню.
 */

/**
 * @brief Геттер окна игры.
 *
 * @return Указатель на окно игры.
 */
WINDOW *getGameWin(void);

/**
 * @brief Геттер окна информации.
 *
 * @return Указатель на окно информации.
 */
WINDOW *getInfoWin(void);

/**
 * @brief Геттер окна следующей фигуры.
 *
 * @return Указатель на окно следующей фигуры.
 */
WINDOW *getNextWin(void);

/**
 * @brief Геттер окна управления.
 *
 * @return Указатель на окно управления.
 */
WINDOW *getControlWin(void);

/**
 * @brief Геттер окна меню.
 *
 * @return Указатель на окно меню.
 */
WINDOW *getMenuWin(void);

/** @} */

/**
 * @defgroup WindowSetters Функции для установки указателей на окна
 * @{
 * @brief Функции для установки указателей на окна
 *
 * Эти функции устанавливают указатели на окна, в которых отображаются
 * информационные панели, игровое поле, следующая фигура и меню.
 */

/**
 * @brief Установить окно игры.
 *
 * @param game_win Указатель на новое окно игры.
 */
void setGameWin(WINDOW *);

/**
 * @brief Установить окно информации.
 *
 * @param info_win Указатель на новое окно информации.
 */
void setInfoWin(WINDOW *);

/**
 * @brief Установить окно следующей фигуры.
 *
 * @param next_win Указатель на новое окно следующей фигуры.
 */
void setNextWin(WINDOW *);

/**
 * @brief Установить окно управления.
 *
 * @param control_win Указатель на новое окно управления.
 */
void setControlWin(WINDOW *);

/**
 * @brief Установить окно меню.
 *
 * @param menu_win Указатель на новое окно меню.
 */
void setMenuWin(WINDOW *);

/** @} */

#endif
